// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ChildSuggest struct {
	Word   string  `json:"word"`
	Growth *Growth `json:"growth"`
	Graphs *Graphs `json:"graphs"`
}

type Graph struct {
	Date  string `json:"date"`
	Value int    `json:"value"`
}

type Graphs struct {
	Short  []*Graph `json:"short"`
	Medium []*Graph `json:"medium"`
	Long   []*Graph `json:"long"`
}

type Growth struct {
	Short  Arrow `json:"short"`
	Medium Arrow `json:"medium"`
	Long   Arrow `json:"long"`
}

type History struct {
	SuggestID int      `json:"suggestId"`
	Keyword   string   `json:"keyword"`
	Date      string   `json:"date"`
	Status    Progress `json:"status"`
}

type Suggest struct {
	Keyword       string          `json:"keyword"`
	ChildSuggests []*ChildSuggest `json:"childSuggests"`
}

type Arrow string

const (
	ArrowUp   Arrow = "UP"
	ArrowFlat Arrow = "FLAT"
	ArrowDown Arrow = "DOWN"
)

var AllArrow = []Arrow{
	ArrowUp,
	ArrowFlat,
	ArrowDown,
}

func (e Arrow) IsValid() bool {
	switch e {
	case ArrowUp, ArrowFlat, ArrowDown:
		return true
	}
	return false
}

func (e Arrow) String() string {
	return string(e)
}

func (e *Arrow) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Arrow(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Arrow", str)
	}
	return nil
}

func (e Arrow) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Progress string

const (
	ProgressInProgress Progress = "IN_PROGRESS"
	ProgressCompleted  Progress = "COMPLETED"
)

var AllProgress = []Progress{
	ProgressInProgress,
	ProgressCompleted,
}

func (e Progress) IsValid() bool {
	switch e {
	case ProgressInProgress, ProgressCompleted:
		return true
	}
	return false
}

func (e Progress) String() string {
	return string(e)
}

func (e *Progress) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Progress(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Progress", str)
	}
	return nil
}

func (e Progress) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
